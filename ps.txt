move
copy
add
delete
write
date fetch
year
month
date format change 

creating file    ::  New-Item -Path 'D:\temp\Test Folder\Test File.txt' -ItemType File
delete           ::  Remove-item 'c:\temp\new folder'
copy folder      ::  Copy-Item 'D:\temp\Test Folder' 'D:\temp\Test Folder1'
     file        ::  Copy-Item 'D:\temp\Test Folder\Test File.txt' 'D:\temp\Test Folder1\Test File1.txt'
move  folder     ::  Move-Item D:\temp\Test D:\temp\Test1
       file      :: Move-Item D:\temp\Test\Test.txt D:\temp\Test1

write data       :: Set-Content D:\temp\Test\test.txt
Show info        :: Get-Content D:\temp\Test\test.txt
apend            :: add-content D:\temp\Test\test.txt
check existance  :: Test-Path D:\temp\test\test2.txt   //print true or false
running process  ::     Get-process

Kill process     ::  Stop-process -id 2654 -force
                     Stop-process -name "Notepad" -force
                     
assign value in variable :: $a= 3, $b= "abc", $c="a", "b", "c"
fetch data from array ::  $c[1] or $c[1..3]
Date             :: Get-date
year             :: Get-date -format yyyy or yy
month            :: Get-date -format m
 
$$               :: print last token.
                    Ex-New-Item 'D:\temp\Test Folder\Test File.txt' -ItemType File...  // print- file
                    Set-Content D:\temp\Test\test.txt 'Hello'  // print- Hello
$?               :: last Execution status // print true or false
$^               :: 1st token in last line 
                    Ex- Set-Content D:\temp\Test\test.txt  // print Set-content
$ERROR           :: Represents an array of error objects that represent the most recent errors.
$pshome          :: C:\Windows\System32\WindowsPowerShell\v1.0
$pid             :: 8844 // current id
$PSVersionTable  :: s version
$null            :: this variable to represent an absent or undefined value in commands and scripts.
$HOST            :: current host application for PowerShell.

-eq              :: (equals)
                    2 -eq 2 // true	
                   ("Tic","Tac","Toe") -eq "Tac" // Tac

-ne              :: (not equals)	
-gt              :: (greater than)
-ge              :: (greater than or equals to)
-lt              :: (less than)
-le              :: (less than or equals to)
-AND             ::   (1 -eq 1) -and (2 -eq 2)  //result= true if both statement are true
-OR              ::  (1 -eq 1)  -or  (1 -eq 2)  //result= true if one of the statement is true

-NOT             :: -not (1 -eq 1) Negates the statement // return false
                    -not (1 -eq 2) // false

-XOR             :: (1 -eq 1) -xor (2 -eq 2) // return true if only one statement is true
                    o/p= false
		    (1 -eq 2) -xor (2 -eq 2)
                    o/p= True

Example:-
                     $a = 1, 
$b = 2
, $c = 3
		     $msg = "Hello World"
		     $d = -not ((($a -eq 1) -and ($b -gt $a)) -or
     (($b -lt $c) -xor ($a -ge $b)))
		     if ($d -eq $false){
    Write-Host $msg -ForegroundColor Green}


-Replace         ::   $demo = "abcdef"
                      $demo.replace("dEf","xyz")
                      "abcdef" -replace "dEf","xyz"

-like            ::  "chandigarh university" -like "*sity"         //true
                     "chandigarh university" -like "*univer"       //false

-unlike          ::  "chandigarh university" -unlike "*university  //false"

looping :-1. (for loop)  > $array = @("item1", "item2", "item3")
 		      > for($i = 0; $i -lt $array.length; $i++){ $array[$i] }

              ex2=     for($i=1; $i -le 100 ; $i++){$i}  // return 1 to 100

         2. (for each loop) $array="i1", "i2", "i3"      //traverse the elements
                            $array |  foreach {$_}

              ex2=	foreach ($a in $array) { $a }

	 3. (while loop) :: while ($val -ne 10) { val++; Write-host $val} //1 to 10

	 4. (do while)   :: $x = ("a1", "a2", "a3")
			     $b=0
			     do { $x[$b]; $b += 1} while ($b -lt $x.Length)

Get Directory		::

			Get-childitem -path 'C:\temp'
 			Get-childitem -directory

get notepad id          ::    Get-process -name notepad

kill notepad  	        ::    stop-process -id 1234

fetch data from file    ::  get-Content 'C:\temp\new\myfile.txt'

table of two            :: 	$a=2;
				for($i=1;$i -le 10; $i+=1){
				$b=$a*$i;
				Write-Host("$a * $i = " +$b)}

1			
12
123
1234
12345
		::	for($i=1;$i -le 5; $i++){
			for ($j=1;$j -le $i; $j++){
			Write-Host -NoNewline($j)
			}
			Write-Host("")
			}


fibonici series :: 0,1,1,2,3,5,8,13........

$a=0
$b=1
for($i=1; $i -lt 10; $i++ ){
$c= $a+$b
Write-Host($c)
$a=$b
$b=$c
}

pattern:

     *
    * *
   * * *
  * * * *
 * * * * *

for($i=1;$i -le 5; $i+=1){
for($j=5;$j -gt $i; $j--){
write-host -NoNewline(" ")
}
for($k=1;$k -le $i ; $k++){
Write-Host -NoNewline("* ")
}
Write-Host ("")
}

2.


*
* *
* * *
* * * *
* * * * *

for($i=1;$i -le 5; $i+=1){
for($j=1;$j -le $i; $j+=1){
write-host -NoNewline("*")
}
Write-Host("")
}

Get-service   ::  show all process running nd stopped both
ex- get-service -name W*  //op- all process which starts from W


Get-Process | Get-Member  :: if u forget a cmdlet's parameter

start-process notepad   ::  to open notepad

 “$_.” defines current element in the pipe

Get-alias  :: shortcut of all cmdlets

change

 



